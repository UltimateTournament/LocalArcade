# syntax=docker/dockerfile:1.4

# newer syntax is needed for "<<-eot" here-cdoc syntax support below.
# we're using this to avoid copying the server config into each game while at the same time avoiding to
# mount the whole repo as build context

FROM nginx:stable-alpine
COPY <<-eot /etc/nginx/conf.d/default.conf
    map \$http_upgrade \$connection_upgrade {
        default upgrade;
        ''      close;
    }
    map \$http_upgrade \$uri_ws {
        default         \$uri;
        'websocket'     /websocket;
    }
    map \$http_upgrade \$uri_ws2 {
        default         \$uri/;
        'websocket'     /websocket;
    }
    map \$http_upgrade \$uri_ws3 {
        default         \$uri/index.html;
        'websocket'     /websocket;
    }
    server {
        listen       80;
        server_name  localhost;
        location @proxy {
            proxy_read_timeout 300s;
            proxy_http_version 1.1;
            proxy_set_header Upgrade \$http_upgrade;
            proxy_set_header Connection \$connection_upgrade;
            proxy_pass http://backend:7778;
        }
        location / {
            root   /usr/share/nginx/html;
            index  index.html index.htm;
            try_files \$uri_ws \$uri_ws2 \$uri_ws3 @proxy;
            # On-disk Brotli-precompressed data files should be served with compression enabled:
            location ~ .+\.(data|symbols\.json)\.br$ {
                # Because this file is already pre-compressed on disk, disable the on-demand compression on it.
                # Otherwise nginx would attempt double compression.
                gzip off;
                add_header Content-Encoding br;
                default_type application/octet-stream;
            }
            # On-disk Brotli-precompressed JavaScript code files:
            location ~ .+\.js\.br$ {
                gzip off; # Do not attempt dynamic gzip compression on an already compressed file
                add_header Content-Encoding br;
                default_type application/javascript;
            }
            # On-disk Brotli-precompressed WebAssembly files:
            location ~ .+\.wasm\.br$ {
                gzip off; # Do not attempt dynamic gzip compression on an already compressed file
                add_header Content-Encoding br;
                # Enable streaming WebAssembly compilation by specifying the correct MIME type for
                # Wasm files.
                default_type application/wasm;
            }
            # On-disk gzip-precompressed data files should be served with compression enabled:
            location ~ .+\.(data|symbols\.json)\.gz$ {
                gzip off; # Do not attempt dynamic gzip compression on an already compressed file
                add_header Content-Encoding gzip;
                default_type application/octet-stream;
            }
            # On-disk gzip-precompressed JavaScript code files:
            location ~ .+\.js\.gz$ {
                gzip off; # Do not attempt dynamic gzip compression on an already compressed file
                add_header Content-Encoding gzip;
                default_type application/javascript;
            }
            # On-disk gzip-precompressed WebAssembly files:
            location ~ .+\.wasm\.gz$ {
                gzip off; # Do not attempt dynamic gzip compression on an already compressed file
                add_header Content-Encoding gzip;
                # Enable streaming WebAssembly compilation by specifying the correct MIME type for
                # Wasm files.
                default_type application/wasm;
            }
            location ~ .+\.(data|symbols\.json)$ {
                default_type application/octet-stream;
            }
            location ~ .+\.js$ {
                default_type application/javascript;
            }
            location ~ .+\.wasm$ {
                # Enable streaming WebAssembly compilation by specifying the correct MIME type for
                # Wasm files.
                default_type application/wasm;
            }
        }
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   /usr/share/nginx/html;
        }
    }
eot


COPY . /usr/share/nginx/html/
# UnityBug? Game uses If-Modfied-Since even for the initial data load, so we must ensure the data files
# are newer than the WASM build itself
RUN chmod 0444 /usr/share/nginx/html/*/* ; touch /usr/share/nginx/html/*/*
